rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId in the document can create their profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - User cannot create a profile with a different userId.
     * @deny (update, delete) - User cannot modify or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to user transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user can create a transaction under their userId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own transactions.
     * @deny (create) - User cannot create a transaction under a different userId.
     * @deny (update, delete) - User cannot modify or delete another user's transaction.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to user goals.
     * @path /users/{userId}/goals/{goalId}
     * @allow (create) - Authenticated user can create a goal under their userId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own goals.
     * @deny (create) - User cannot create a goal under a different userId.
     * @deny (update, delete) - User cannot modify or delete another user's goal.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/goals/{goalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to user scheduled transactions.
     * @path /users/{userId}/scheduledTransactions/{scheduledTransactionId}
     * @allow (create) - Authenticated user can create a scheduled transaction under their userId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own scheduled transactions.
     * @deny (create) - User cannot create a scheduled transaction under a different userId.
     * @deny (update, delete) - User cannot modify or delete another user's scheduled transaction.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduledTransactions/{scheduledTransactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to user insights.
     * @path /users/{userId}/insights/{insightId}
     * @allow (create) - Authenticated user can create an insight under their userId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own insights.
     * @deny (create) - User cannot create an insight under a different userId.
     * @deny (update, delete) - User cannot modify or delete another user's insight.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/insights/{insightId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}