/**
 * @fileoverview Firestore Security Rules for the FinWell application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has exclusive access to their profile and associated financial data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and simplifying security rules.  Specifically, the following structure exists:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/transactions/{transactionId}: Financial transactions for the user.
 * - /users/{userId}/goals/{goalId}: Financial goals for the user.
 * - /users/{userId}/scheduledTransactions/{scheduledTransactionId}: Scheduled transactions for the user.
 * - /users/{userId}/insights/{insightId}: Financial insights for the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user access is allowed unless explicitly defined with role-based access using collaborative documents.
 * - Listing of user documents is denied to prevent information disclosure.
 * - Strict path-based ownership is enforced to avoid complex `get()` calls in security rules.
 *
 * Denormalization for Authorization:
 * The `userId` is embedded in the path for all user-specific data. This avoids costly `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document at /users/user_abc if the document id matches the user id.
     * @allow (get) - User with UID 'user_abc' can read their profile document at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their profile document at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their profile document at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify identity
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User with UID 'user_abc' can create a transaction document under /users/user_abc/transactions/transaction_123.
     * @allow (get) - User with UID 'user_abc' can read a transaction document under /users/user_abc/transactions/transaction_123.
     * @allow (update) - User with UID 'user_abc' can update a transaction document under /users/user_abc/transactions/transaction_123.
     * @allow (delete) - User with UID 'user_abc' can delete a transaction document under /users/user_abc/transactions/transaction_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a transaction document under /users/user_abc/transactions/transaction_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/goals/{goalId} collection.
     * @path /users/{userId}/goals/{goalId}
     * @allow (create) - User with UID 'user_abc' can create a goal document under /users/user_abc/goals/goal_123.
     * @allow (get) - User with UID 'user_abc' can read a goal document under /users/user_abc/goals/goal_123.
     * @allow (update) - User with UID 'user_abc' can update a goal document under /users/user_abc/goals/goal_123.
     * @allow (delete) - User with UID 'user_abc' can delete a goal document under /users/user_abc/goals/goal_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a goal document under /users/user_abc/goals/goal_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/goals/{goalId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/scheduledTransactions/{scheduledTransactionId} collection.
     * @path /users/{userId}/scheduledTransactions/{scheduledTransactionId}
     * @allow (create) - User with UID 'user_abc' can create a scheduled transaction document under /users/user_abc/scheduledTransactions/scheduledTransaction_123.
     * @allow (get) - User with UID 'user_abc' can read a scheduled transaction document under /users/user_abc/scheduledTransactions/scheduledTransaction_123.
     * @allow (update) - User with UID 'user_abc' can update a scheduled transaction document under /users/user_abc/scheduledTransactions/scheduledTransaction_123.
     * @allow (delete) - User with UID 'user_abc' can delete a scheduled transaction document under /users/user_abc/scheduledTransactions/scheduledTransaction_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a scheduled transaction document under /users/user_abc/scheduledTransactions/scheduledTransaction_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduledTransactions/{scheduledTransactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/insights/{insightId} collection.
     * @path /users/{userId}/insights/{insightId}
     * @allow (create) - User with UID 'user_abc' can create an insight document under /users/user_abc/insights/insight_123.
     * @allow (get) - User with UID 'user_abc' can read an insight document under /users/user_abc/insights/insight_123.
     * @allow (update) - User with UID 'user_abc' can update an insight document under /users/user_abc/insights/insight_123.
     * @allow (delete) - User with UID 'user_abc' can delete an insight document under /users/user_abc/insights/insight_123.
     * @deny (create) - User with UID 'user_xyz' cannot create an insight document under /users/user_abc/insights/insight_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/insights/{insightId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}